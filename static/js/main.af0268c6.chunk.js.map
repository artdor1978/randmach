{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["parseHtmlEnteties","str","replace","match","numStr","num","parseInt","String","fromCharCode","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","quote","content","title","getQuote","bind","assertThisInitialized","_this2","i","Math","floor","random","fetch","then","response","ok","json","Error","data","setState","catch","error","console","log","react_default","a","createElement","id","target","href","rel","class","onClick","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sOAGA,SAASA,EAAkBC,GACvB,OAAOA,EAAIC,QAAQ,oBAAqB,SAASC,EAAOC,GACpD,IAAIC,EAAMC,SAASF,EAAQ,IAC3B,OAAOG,OAAOC,aAAaH,SAoDpBI,cA9Cf,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAEXC,MAAO,CACLC,QAAS,GACTC,MAAO,KAEXV,EAAKW,SAAWX,EAAKW,SAASC,KAAdX,OAAAY,EAAA,EAAAZ,CAAAD,IARCA,mFAYjBG,KAAKQ,8CAGK,IAAAG,EAAAX,KACJY,EAAIC,KAAKC,MAAM,KAAAD,KAAKE,UAC5BC,MAAM,2FAA2FJ,GAC9FK,KAAK,SAAAC,GACJ,GAAGA,EAASC,GAAI,OAAOD,EAASE,OAC9B,MAAM,IAAIC,MAAM,qBAEnBJ,KAAK,SAAAK,GACJX,EAAKY,SAAS,CACZlB,MAAOiB,EAAK,OAGjBE,MAAM,SAAAC,GACDC,QAAQC,IAAIF,sCAKhB,OACEG,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAK,QAAQ,IAAM7C,EAAkBc,KAAKI,MAAMC,MAAMC,QAAQlB,QAAQ,eAAgB,MAC3FwC,EAAAC,EAAAC,cAAA,OAAKC,GAAK,UAAU,KAAO/B,KAAKI,MAAMC,MAAME,OAC5CqB,EAAAC,EAAAC,cAAA,KAAGC,GAAG,cAAcC,OAAO,SAASzB,MAAM,oBAC1C0B,KAAM,0CAA+C/C,EAAkBc,KAAKI,MAAMC,MAAMC,QAAQlB,QAAQ,eAAgB,KAAK,IAAIY,KAAKI,MAAMC,MAAME,MAAO2B,IAAI,uBAC7JN,EAAAC,EAAAC,cAAA,KAAGK,MAAM,mBACTP,EAAAC,EAAAC,cAAA,UAAQK,MAAM,MAAMJ,GAAK,YAAYK,QAASpC,KAAKQ,UAAnD,qBA1CY6B,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpD,MACvB,2DCZNqD,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.af0268c6.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nfunction parseHtmlEnteties(str) {\n    return str.replace(/&#([0-9]{1,4});/gi, function(match, numStr) {\n        var num = parseInt(numStr, 10); // read num as normal number\n        return String.fromCharCode(num);\n    });\n}\n\nclass App extends Component {\n\nconstructor(props) {\n  super(props);\n  this.state = {\n    //loading: false,\n    quote: {\n      content: '',\n      title: ''}\n  };\n  this.getQuote = this.getQuote.bind(this)\n}\n\ncomponentDidMount() {\n  this.getQuote();\n}\n\ngetQuote () {\n  const i = Math.floor(Math.random() * (1125 + 1))\nfetch('http://quotesondesign.com/wp-json/posts?filter[orderby]=rand&filter[posts_per_page]=1&_='+i)\n  .then(response => {\n    if(response.ok) return response.json();\n      throw new Error('Request failed.');\n})\n  .then(data => {\n    this.setState({\n      quote: data[0]\n  });\n  })\n.catch(error => {\n      console.log(error);\n    });\n}\n\nrender() {\n  return (\n    <div id=\"quote-box\">\n      <div id = \"text\">{'\"' + parseHtmlEnteties(this.state.quote.content.replace(/<\\/?[^>]+>/gi, ''))}</div>\n      <div id = \"author\">{\"- \" + this.state.quote.title}</div>\n      <a id=\"tweet-quote\" target=\"_blank\" title=\"Tweet this quote!\"\n      href={'http://twitter.com/intent/tweet?&text='+'\"' + parseHtmlEnteties(this.state.quote.content.replace(/<\\/?[^>]+>/gi, ''))+' '+this.state.quote.title} rel=\"noopener noreferrer\">\n      <i class=\"fa fa-twitter\"></i></a>\n      <button class=\"btn\" id = \"new-quote\" onClick={this.getQuote}>New Quote</button>\n     </div>\n )\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\nif (module.hot) {\nmodule.hot.accept();\n}"],"sourceRoot":""}